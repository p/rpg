rpg-solve(1) -- package version solver
======================================

## SYNOPSIS

`rpg solve` [<index>]...

## DESCRIPTION

The `rpg-solve` program finds versions of packages matching specifications on
standard input and writes concrete package versions on standard output.
Available package versions are determined by one or more sorted <index> files.
When a package cannot be located that matches all version specifiers given on
standard input, a line of output is written with the package version: '-'.

The `rpg-install(1)`, `rpg-upgrade(1)`, and `rpg-fetch(1)` programs use
`rpg-solve` to determine optimal package versions for each of their respective
operations.

## STDIN

The standard input is a *package list*. A package list is a simple text stream
where each line specifies a package matching rule in the following format:

    <package> <verspec> <version>

Fields are separated by a single space character and each line must be
terminated with a new line (`\n`) character.

  * `<package>`:
    The package name. This can be any combination of alphanumerics, the
    underscore, or dash.

  * `<verspec>`:
    A package version comparator specifying the basic matching criteria for the
    `<version>`. Any of `<`, `<=`, `=`, `>=`, `>`, or `~>` are allowed.

  * `<version>`:
    The package version.

The package list may contain multiple rules for a single package. Only those
versions matching all rules are considered *matching* and written to standard
output.

## INPUT FILES

The <index> files given as operands to the `rpg-solve` program are plain text
*package index* files with the following format:

    <package> <version>

Fields are separated by a single space character and each line must be
terminated with a new line (`\n`) character. Fields have the same meaning as
defined above in the *STDIN* section.

Package index files must be sorted in ascending alphabetical order by
`<package>` then descending natural order by `<version>`. When the index files
are not sorted properly, the resulting behavior from `rpg-solve` is undefined.

## OUTPUT FORMAT

`rpg-solve` writes a *package index* on standard output.

## EXAMPLES

The following is in a file named `some-index`:

    rack 1.2
    rack 1.1
    rack 1.0
    rack 0.9.7
    rails 2.3.1
    rails 2.3.0
    rails 2.1.0
    sinatra 0.9.6
    sinatra 0.9.4
    sinatra 0.9.3

Pipe a package list into `rpg-solve` using `some-index` for lookups:

    $ cat <<EOF | rpg-solve some-index
    rails > 2.2
    sinatra >= 0.9.6
    rack >= 1.0
    rack >= 1.0.1
    mustache >= 3.0
    EOF

The `rpg-solve` standard output is:

    mustache -
    rack 1.2
    rack 1.1
    rails 2.3.1
    rails 2.3.0
    sinatra 0.9.6

Note that all matching versions are written to standard output. The list can be
narrowed down to only the best match for each package with `sort(1)`:

    $ cat <<EOF | rpg-solve some-index | sort -u -k 1,1
    ...

The output would then be:

    mustache -
    rack 1.2
    rails 2.3.1
    sinatra 0.9.6

The `rpg-solve` program requires strict formatting of the input package list.
The `rpg-package-list(1)` program can be used to generate an input package list
given package/versions on the command line and is much more forgiving.

    $ rpg-package-list rack '>1.2' sinatra 0.9.6 | rpg-solve

## SEE ALSO

`rpg-package-list(1)`, `rpg-prepare(1)`, `rpg-install(1)`
